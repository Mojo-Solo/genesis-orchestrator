version: '3.8'

services:
  # Temporal Server for workflow orchestration
  temporal:
    image: temporalio/auto-setup:latest
    ports:
      - "7233:7233"
      - "8233:8233"
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgres
    depends_on:
      - postgres
    networks:
      - orchestrator-network

  # PostgreSQL for Temporal
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: temporal
      POSTGRES_PASSWORD: temporal
      POSTGRES_DB: temporal
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - orchestrator-network

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - orchestrator-network

  # Unified MCP Orchestrator
  orchestrator:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"  # MCP Server
      - "9090:9090"  # Metrics
      - "8081:8081"  # Health checks
    environment:
      - TEMPORAL_HOST=temporal:7233
      - REDIS_HOST=redis:6379
      - POSTGRES_HOST=postgres:5432
      - ENABLE_MONITORING=true
      - ENABLE_META_LEARNING=true
      - LOG_LEVEL=INFO
    depends_on:
      - temporal
      - redis
    volumes:
      - ./config:/app/config
      - ./artifacts:/app/artifacts
      - ./logs:/app/logs
    networks:
      - orchestrator-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Temporal Worker (can scale horizontally)
  temporal-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - TEMPORAL_HOST=temporal:7233
      - WORKER_TASK_QUEUE=orchestrator-tasks
      - REDIS_HOST=redis:6379
      - MAX_CONCURRENT_ACTIVITIES=10
      - MAX_CONCURRENT_WORKFLOWS=5
    depends_on:
      - temporal
      - redis
    volumes:
      - ./config:/app/config
      - ./artifacts:/app/artifacts
    networks:
      - orchestrator-network
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - orchestrator-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - orchestrator-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # UI
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - orchestrator-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - orchestrator
    networks:
      - orchestrator-network

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  orchestrator-network:
    driver: bridge