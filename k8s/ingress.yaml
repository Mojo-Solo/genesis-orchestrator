apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: genesis-orchestrator-ingress
  namespace: genesis-orchestrator
  labels:
    app: genesis-orchestrator
    app.kubernetes.io/name: genesis-orchestrator
    app.kubernetes.io/component: ingress
  annotations:
    # Nginx Ingress Controller annotations
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-burst: "20"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # Security headers
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options DENY;
      add_header X-Content-Type-Options nosniff;
      add_header X-XSS-Protection "1; mode=block";
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin";
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';";
    
    # TLS configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: "http01"
    
    # Load balancing and canary deployment
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    nginx.ingress.kubernetes.io/canary: "false"
    nginx.ingress.kubernetes.io/canary-weight: "0"
    
    # Custom error pages
    nginx.ingress.kubernetes.io/custom-http-errors: "404,500,502,503,504"
    nginx.ingress.kubernetes.io/default-backend: "error-pages"
    
    # Monitoring
    prometheus.io/scrape: "true"
    prometheus.io/port: "10254"
    prometheus.io/path: "/metrics"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - genesis.production.com
    - api.genesis.production.com
    secretName: genesis-tls-secret
  rules:
  - host: genesis.production.com
    http:
      paths:
      - path: /health
        pathType: Prefix
        backend:
          service:
            name: genesis-orchestrator
            port:
              number: 8081
      - path: /metrics
        pathType: Prefix
        backend:
          service:
            name: genesis-orchestrator
            port:
              number: 9090
      - path: /
        pathType: Prefix
        backend:
          service:
            name: genesis-orchestrator
            port:
              number: 8080
  - host: api.genesis.production.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: genesis-orchestrator
            port:
              number: 8080

---
# Canary ingress for blue-green deployments
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: genesis-orchestrator-canary
  namespace: genesis-orchestrator
  labels:
    app: genesis-orchestrator
    app.kubernetes.io/name: genesis-orchestrator
    app.kubernetes.io/component: canary-ingress
  annotations:
    nginx.ingress.kubernetes.io/canary: "true"
    nginx.ingress.kubernetes.io/canary-weight: "0"  # Initially 0% traffic
    nginx.ingress.kubernetes.io/canary-by-header: "X-Canary"
    nginx.ingress.kubernetes.io/canary-by-header-value: "always"
    nginx.ingress.kubernetes.io/canary-by-cookie: "canary"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - genesis.production.com
    secretName: genesis-tls-secret
  rules:
  - host: genesis.production.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: genesis-orchestrator-green
            port:
              number: 8080

---
# Internal ingress for monitoring and admin access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: genesis-monitoring-ingress
  namespace: genesis-orchestrator
  labels:
    app: genesis-orchestrator
    app.kubernetes.io/name: genesis-orchestrator
    app.kubernetes.io/component: monitoring-ingress
  annotations:
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-auth
    nginx.ingress.kubernetes.io/auth-realm: "GENESIS Monitoring - Authentication Required"
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - monitoring.genesis.production.com
    secretName: monitoring-tls-secret
  rules:
  - host: monitoring.genesis.production.com
    http:
      paths:
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: prometheus
            port:
              number: 9090
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
      - path: /jaeger
        pathType: Prefix
        backend:
          service:
            name: jaeger
            port:
              number: 16686
      - path: /alertmanager
        pathType: Prefix
        backend:
          service:
            name: alertmanager
            port:
              number: 9093

---
# TLS Certificate using cert-manager
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: genesis-tls-cert
  namespace: genesis-orchestrator
spec:
  secretName: genesis-tls-secret
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - genesis.production.com
  - api.genesis.production.com
  - "*.genesis.production.com"

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: monitoring-tls-cert
  namespace: genesis-orchestrator
spec:
  secretName: monitoring-tls-secret
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - monitoring.genesis.production.com

---
# ClusterIssuer for Let's Encrypt
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@genesis.production.com
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx
    - dns01:
        route53:
          region: us-east-1
          accessKeyID: "${AWS_ACCESS_KEY_ID}"
          secretAccessKeySecretRef:
            name: route53-credentials
            key: secret-access-key