<?php

namespace App\Services\Unified;

/**
 * Unified Business Assessment Service
 * 
 * Consolidated service combining exit planning and cascade assessment functionality.
 * Eliminates code duplication and provides consistent scoring algorithms across the system.
 * 
 * Generated by Lead Architect + Performance Optimizer Agents
 * Part of GENESIS Phase 1.3: Service Consolidation
 */
class BusinessAssessmentService
{
    /**
     * Assessment type constants for different business scenarios
     */
    public const TYPE_EXIT_PLANNING = 'exit_planning';
    public const TYPE_BUSINESS_TRANSITION = 'business_transition';
    public const TYPE_SUCCESSION_PLANNING = 'succession_planning';
    
    /**
     * Default scoring weights for different assessment dimensions
     */
    private const DEFAULT_WEIGHTS = [
        'personal' => 0.25,
        'financial' => 0.35,
        'business' => 0.40
    ];
    
    /**
     * Configuration for different assessment types
     */
    private const ASSESSMENT_CONFIGS = [
        self::TYPE_EXIT_PLANNING => [
            'time_field' => 'time_to_exit_months',
            'min_time_months' => 6,
            'max_bonus_multiplier' => 0.35
        ],
        self::TYPE_BUSINESS_TRANSITION => [
            'time_field' => 'time_to_transition_months',
            'min_time_months' => 3,
            'max_bonus_multiplier' => 0.30
        ],
        self::TYPE_SUCCESSION_PLANNING => [
            'time_field' => 'time_to_succession_months',
            'min_time_months' => 12,
            'max_bonus_multiplier' => 0.40
        ]
    ];
    
    /**
     * Calculate comprehensive readiness score with configurable assessment type
     * 
     * @param float $personalReadiness Personal readiness score (0.0 - 1.0)
     * @param float $financialReadiness Financial readiness score (0.0 - 1.0)  
     * @param float $businessReadiness Business readiness score (0.0 - 1.0)
     * @param int $baseValue Base business valuation
     * @param int $baseTimeMonths Base time to completion in months
     * @param string $assessmentType Type of assessment (exit_planning, business_transition, succession_planning)
     * @param array $customWeights Optional custom scoring weights
     * @return array Comprehensive assessment results
     */
    public function calculateReadinessScore(
        float $personalReadiness,
        float $financialReadiness,
        float $businessReadiness,
        int $baseValue = 1000000,
        int $baseTimeMonths = 24,
        string $assessmentType = self::TYPE_EXIT_PLANNING,
        array $customWeights = []
    ): array {
        // Validate input parameters
        $this->validateInputs($personalReadiness, $financialReadiness, $businessReadiness, $assessmentType);
        
        // Get assessment configuration
        $config = self::ASSESSMENT_CONFIGS[$assessmentType];
        
        // Use custom weights if provided, otherwise use defaults
        $weights = empty($customWeights) ? self::DEFAULT_WEIGHTS : array_merge(self::DEFAULT_WEIGHTS, $customWeights);
        
        // Calculate weighted overall score
        $weightedScore = $this->calculateWeightedScore(
            $personalReadiness,
            $financialReadiness, 
            $businessReadiness,
            $weights
        );
        
        // Calculate time-based metrics
        $timeToCompletion = $this->calculateTimeToCompletion(
            $weightedScore,
            $baseTimeMonths,
            $config['min_time_months']
        );
        
        // Calculate valuation impact
        $valuationMultiplier = $this->calculateValuationMultiplier(
            $weightedScore,
            $config['max_bonus_multiplier']
        );
        
        $projectedValue = $baseValue * $valuationMultiplier;
        
        // Generate comprehensive results
        return [
            'assessment_type' => $assessmentType,
            'overall_score' => round($weightedScore, 3),
            'dimension_scores' => [
                'personal' => round($personalReadiness, 3),
                'financial' => round($financialReadiness, 3),
                'business' => round($businessReadiness, 3)
            ],
            'weights' => $weights,
            $config['time_field'] => $timeToCompletion,
            'valuation_multiplier' => round($valuationMultiplier, 4),
            'projected_value' => $projectedValue,
            'readiness_level' => $this->getReadinessLevel($weightedScore),
            'readiness_category' => $this->getReadinessCategory($weightedScore),
            'recommendations' => $this->generateRecommendations($weightedScore, $personalReadiness, $financialReadiness, $businessReadiness),
            'risk_factors' => $this->identifyRiskFactors($personalReadiness, $financialReadiness, $businessReadiness),
            'metadata' => [
                'calculated_at' => now(),
                'algorithm_version' => '2.0',
                'base_value' => $baseValue,
                'base_time_months' => $baseTimeMonths
            ]
        ];
    }
    
    /**
     * Calculate weighted score from dimension inputs
     */
    private function calculateWeightedScore(
        float $personal,
        float $financial,
        float $business,
        array $weights
    ): float {
        return (
            $personal * $weights['personal'] +
            $financial * $weights['financial'] +
            $business * $weights['business']
        );
    }
    
    /**
     * Calculate time to completion based on readiness score
     */
    private function calculateTimeToCompletion(
        float $score,
        int $baseMonths,
        int $minMonths
    ): int {
        // Higher scores = shorter time to completion
        $adjustment = (1.0 - $score) * $baseMonths;
        return max($minMonths, intval($baseMonths + $adjustment));
    }
    
    /**
     * Calculate valuation multiplier based on readiness
     */
    private function calculateValuationMultiplier(
        float $score,
        float $maxBonus
    ): float {
        $baseMultiplier = 1.0;
        return $baseMultiplier + ($score * $maxBonus);
    }
    
    /**
     * Get human-readable readiness level
     */
    private function getReadinessLevel(float $score): string
    {
        if ($score >= 0.90) return 'Exceptionally Ready';
        if ($score >= 0.85) return 'Highly Ready';
        if ($score >= 0.70) return 'Moderately Ready';
        if ($score >= 0.55) return 'Developing Readiness';
        if ($score >= 0.35) return 'Early Stage';
        return 'Not Ready';
    }
    
    /**
     * Get readiness category for analytics
     */
    private function getReadinessCategory(float $score): string
    {
        if ($score >= 0.85) return 'green';
        if ($score >= 0.70) return 'yellow';
        if ($score >= 0.55) return 'orange';
        return 'red';
    }
    
    /**
     * Generate personalized recommendations based on scores
     */
    private function generateRecommendations(
        float $overall,
        float $personal,
        float $financial,
        float $business
    ): array {
        $recommendations = [];
        
        // Identify weakest dimension
        $scores = [
            'personal' => $personal,
            'financial' => $financial,
            'business' => $business
        ];
        
        $weakestDimension = array_keys($scores, min($scores))[0];
        $weakestScore = min($scores);
        
        // Generate targeted recommendations
        if ($weakestScore < 0.70) {
            $recommendations[] = "Focus on improving {$weakestDimension} readiness (current: " . round($weakestScore * 100, 1) . "%)";
        }
        
        if ($personal < 0.70) {
            $recommendations[] = "Consider leadership coaching and succession planning training";
        }
        
        if ($financial < 0.70) {
            $recommendations[] = "Engage financial advisor for comprehensive financial planning";
        }
        
        if ($business < 0.70) {
            $recommendations[] = "Conduct operational efficiency review and process documentation";
        }
        
        if ($overall >= 0.85) {
            $recommendations[] = "Consider accelerating timeline - you're well-prepared";
        }
        
        return $recommendations;
    }
    
    /**
     * Identify potential risk factors
     */
    private function identifyRiskFactors(
        float $personal,
        float $financial,
        float $business
    ): array {
        $risks = [];
        
        if ($personal < 0.50) {
            $risks[] = [
                'category' => 'personal',
                'severity' => 'high',
                'description' => 'Low personal readiness may lead to poor decision-making during transition'
            ];
        }
        
        if ($financial < 0.50) {
            $risks[] = [
                'category' => 'financial',
                'severity' => 'high', 
                'description' => 'Financial unpreparedness could force suboptimal timing or terms'
            ];
        }
        
        if ($business < 0.50) {
            $risks[] = [
                'category' => 'business',
                'severity' => 'high',
                'description' => 'Business operational gaps may reduce valuation or transaction success'
            ];
        }
        
        // Check for imbalanced scores
        $maxScore = max($personal, $financial, $business);
        $minScore = min($personal, $financial, $business);
        
        if (($maxScore - $minScore) > 0.40) {
            $risks[] = [
                'category' => 'balance',
                'severity' => 'medium',
                'description' => 'Significant imbalance between readiness dimensions may create vulnerabilities'
            ];
        }
        
        return $risks;
    }
    
    /**
     * Validate input parameters
     */
    private function validateInputs(
        float $personal,
        float $financial,
        float $business,
        string $assessmentType
    ): void {
        // Validate score ranges
        if ($personal < 0.0 || $personal > 1.0) {
            throw new \InvalidArgumentException('Personal readiness score must be between 0.0 and 1.0');
        }
        
        if ($financial < 0.0 || $financial > 1.0) {
            throw new \InvalidArgumentException('Financial readiness score must be between 0.0 and 1.0');
        }
        
        if ($business < 0.0 || $business > 1.0) {
            throw new \InvalidArgumentException('Business readiness score must be between 0.0 and 1.0');
        }
        
        // Validate assessment type
        if (!array_key_exists($assessmentType, self::ASSESSMENT_CONFIGS)) {
            throw new \InvalidArgumentException('Invalid assessment type: ' . $assessmentType);
        }
    }
    
    /**
     * Get available assessment types
     */
    public static function getAvailableAssessmentTypes(): array
    {
        return array_keys(self::ASSESSMENT_CONFIGS);
    }
    
    /**
     * Get configuration for a specific assessment type
     */
    public static function getAssessmentConfig(string $assessmentType): array
    {
        if (!array_key_exists($assessmentType, self::ASSESSMENT_CONFIGS)) {
            throw new \InvalidArgumentException('Invalid assessment type: ' . $assessmentType);
        }
        
        return self::ASSESSMENT_CONFIGS[$assessmentType];
    }
    
    /**
     * Compare multiple assessment scenarios
     */
    public function compareScenarios(array $scenarios): array
    {
        $results = [];
        
        foreach ($scenarios as $name => $scenario) {
            $results[$name] = $this->calculateReadinessScore(
                $scenario['personal'] ?? 0.0,
                $scenario['financial'] ?? 0.0,
                $scenario['business'] ?? 0.0,
                $scenario['base_value'] ?? 1000000,
                $scenario['base_time'] ?? 24,
                $scenario['type'] ?? self::TYPE_EXIT_PLANNING,
                $scenario['weights'] ?? []
            );
        }
        
        return [
            'scenarios' => $results,
            'comparison' => $this->analyzeScenarios($results)
        ];
    }
    
    /**
     * Analyze multiple scenarios for comparison insights
     */
    private function analyzeScenarios(array $results): array
    {
        if (count($results) < 2) {
            return [];
        }
        
        $scores = array_column($results, 'overall_score');
        $bestScenario = array_keys($results, max($results, array_search(max($scores), array_column($results, 'overall_score'))))[0];
        $worstScenario = array_keys($results, min($results, array_search(min($scores), array_column($results, 'overall_score'))))[0];
        
        return [
            'best_scenario' => $bestScenario,
            'worst_scenario' => $worstScenario,
            'score_range' => [
                'min' => min($scores),
                'max' => max($scores),
                'average' => array_sum($scores) / count($scores)
            ],
            'improvement_potential' => max($scores) - min($scores)
        ];
    }
}