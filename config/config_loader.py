#!/usr/bin/env python3
"""
GENESIS Configuration Loader
Dynamic configuration loading with environment-specific overrides
Generated by DevOps Integration Agent
"""

import os
import yaml
import json
from pathlib import Path
from typing import Dict, Any, Optional
from dataclasses import dataclass
import logging

logger = logging.getLogger(__name__)

@dataclass
class GenesisConfig:
    """GENESIS System Configuration"""
    
    # Core configuration data
    config: Dict[str, Any]
    environment: str
    
    def __post_init__(self):
        """Initialize configuration after loading"""
        self._validate_config()
        self._setup_derived_values()
    
    def _validate_config(self) -> None:
        """Validate critical configuration parameters"""
        required_sections = [
            'routing', 'lag_engine', 'stability', 'security', 
            'monitoring', 'artifacts', 'deployment'
        ]
        
        for section in required_sections:
            if section not in self.config:
                raise ValueError(f"Missing required configuration section: {section}")
        
        # Validate stability target for evaluation readiness
        stability_target = self.config.get('stability', {}).get('target_percentage', 0)
        if self.environment == 'production' and stability_target < 98.6:
            raise ValueError(f"Production stability target must be ≥98.6%, got {stability_target}%")
    
    def _setup_derived_values(self) -> None:
        """Setup derived configuration values"""
        # Calculate total token budget
        routing = self.config.get('routing', {})
        token_budgets = routing.get('token_budgets', {})
        self.total_token_budget = sum(token_budgets.get('beta_role', {}).values()) + token_budgets.get('beta_base', 0)
        
        # Setup artifact paths
        artifacts = self.config.get('artifacts', {})
        self.artifact_directory = Path(artifacts.get('output_directory', './artifacts'))
        self.artifact_directory.mkdir(parents=True, exist_ok=True)
    
    def get(self, key: str, default: Any = None) -> Any:
        """Get configuration value with dot notation support"""
        keys = key.split('.')
        value = self.config
        
        for k in keys:
            if isinstance(value, dict) and k in value:
                value = value[k]
            else:
                return default
        
        return value
    
    def get_routing_config(self) -> Dict[str, Any]:
        """Get routing configuration for RCR"""
        return self.config.get('routing', {})
    
    def get_lag_config(self) -> Dict[str, Any]:
        """Get LAG engine configuration"""
        return self.config.get('lag_engine', {})
    
    def get_stability_config(self) -> Dict[str, Any]:
        """Get stability configuration"""
        return self.config.get('stability', {})
    
    def get_security_config(self) -> Dict[str, Any]:
        """Get security configuration"""
        return self.config.get('security', {})
    
    def is_evaluation_ready(self) -> bool:
        """Check if configuration meets evaluation requirements"""
        stability_target = self.get('stability.target_percentage', 0)
        artifacts_enabled = self.get('artifacts.enabled', False)
        security_enabled = self.get('security.authentication.required', False)
        
        return (
            stability_target >= 98.6 and
            artifacts_enabled and
            security_enabled
        )


class ConfigurationLoader:
    """Dynamic configuration loader with environment support"""
    
    def __init__(self, config_dir: Optional[Path] = None):
        """Initialize configuration loader"""
        self.config_dir = config_dir or Path(__file__).parent
        self.environment = os.getenv('GENESIS_ENV', 'development')
        self._config_cache: Optional[GenesisConfig] = None
    
    def load_config(self, force_reload: bool = False) -> GenesisConfig:
        """Load configuration with environment-specific overrides"""
        if self._config_cache and not force_reload:
            return self._config_cache
        
        logger.info(f"Loading GENESIS configuration for environment: {self.environment}")
        
        try:
            # Load base configuration
            base_config = self._load_base_config()
            
            # Apply environment-specific overrides
            final_config = self._apply_environment_overrides(base_config)
            
            # Apply runtime environment variable overrides
            final_config = self._apply_env_var_overrides(final_config)
            
            # Create configuration object
            self._config_cache = GenesisConfig(
                config=final_config,
                environment=self.environment
            )
            
            logger.info(f"Configuration loaded successfully for {self.environment}")
            return self._config_cache
            
        except Exception as e:
            logger.error(f"Failed to load configuration: {e}")
            raise
    
    def _load_base_config(self) -> Dict[str, Any]:
        """Load base configuration from genesis.unified.yaml"""
        base_config_path = self.config_dir / "genesis.unified.yaml"
        
        if not base_config_path.exists():
            raise FileNotFoundError(f"Base configuration not found: {base_config_path}")
        
        with open(base_config_path, 'r') as f:
            return yaml.safe_load(f)
    
    def _apply_environment_overrides(self, base_config: Dict[str, Any]) -> Dict[str, Any]:
        """Apply environment-specific configuration overrides"""
        env_config_path = self.config_dir / "environments" / f"{self.environment}.yaml"
        
        if not env_config_path.exists():
            logger.warning(f"No environment config found for {self.environment}")
            return base_config
        
        with open(env_config_path, 'r') as f:
            env_overrides = yaml.safe_load(f)
        
        return self._deep_merge(base_config, env_overrides)
    
    def _apply_env_var_overrides(self, config: Dict[str, Any]) -> Dict[str, Any]:
        """Apply environment variable overrides"""
        # Database configuration from environment
        if 'database' in config:
            db_config = config['database']
            db_config['host'] = os.getenv('DB_HOST', db_config.get('host', 'localhost'))
            db_config['database'] = os.getenv('DB_DATABASE', db_config.get('database'))
            db_config['username'] = os.getenv('DB_USERNAME', db_config.get('username'))
            db_config['password'] = os.getenv('DB_PASSWORD', db_config.get('password'))
        
        # API keys from environment
        integrations = config.get('integrations', {})
        
        if 'openai' in integrations:
            integrations['openai']['api_key'] = os.getenv('OPENAI_API_KEY')
        
        if 'pinecone' in integrations:
            integrations['pinecone']['api_key'] = os.getenv('PINECONE_API_KEY')
            integrations['pinecone']['environment'] = os.getenv('PINECONE_ENVIRONMENT')
        
        if 'fireflies' in integrations:
            integrations['fireflies']['api_key'] = os.getenv('FIREFLIES_API_KEY')
        
        # Redis configuration
        if 'redis' in integrations:
            redis_config = integrations['redis']
            redis_config['host'] = os.getenv('REDIS_HOST', redis_config.get('host', 'localhost'))
            redis_config['port'] = int(os.getenv('REDIS_PORT', str(redis_config.get('port', 6379))))
            redis_config['password'] = os.getenv('REDIS_PASSWORD', redis_config.get('password'))
        
        return config
    
    def _deep_merge(self, base: Dict[str, Any], override: Dict[str, Any]) -> Dict[str, Any]:
        """Deep merge two dictionaries"""
        result = base.copy()
        
        for key, value in override.items():
            if (
                key in result and
                isinstance(result[key], dict) and
                isinstance(value, dict)
            ):
                result[key] = self._deep_merge(result[key], value)
            else:
                result[key] = value
        
        return result
    
    def validate_configuration(self) -> bool:
        """Validate loaded configuration"""
        try:
            config = self.load_config()
            
            # Check evaluation readiness
            if self.environment == 'production' and not config.is_evaluation_ready():
                logger.error("Configuration not ready for evaluation in production")
                return False
            
            logger.info("Configuration validation passed")
            return True
            
        except Exception as e:
            logger.error(f"Configuration validation failed: {e}")
            return False


def load_genesis_config() -> GenesisConfig:
    """Convenience function to load GENESIS configuration"""
    loader = ConfigurationLoader()
    return loader.load_config()


def validate_genesis_config() -> bool:
    """Convenience function to validate GENESIS configuration"""
    loader = ConfigurationLoader()
    return loader.validate_configuration()


if __name__ == "__main__":
    """CLI interface for configuration management"""
    import argparse
    
    parser = argparse.ArgumentParser(description="GENESIS Configuration Manager")
    parser.add_argument("--validate", action="store_true", help="Validate configuration")
    parser.add_argument("--environment", default=None, help="Override environment")
    parser.add_argument("--show-config", action="store_true", help="Show loaded configuration")
    
    args = parser.parse_args()
    
    if args.environment:
        os.environ['GENESIS_ENV'] = args.environment
    
    # Setup logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    loader = ConfigurationLoader()
    
    if args.validate:
        if loader.validate_configuration():
            print("✅ Configuration validation passed")
            exit(0)
        else:
            print("❌ Configuration validation failed")
            exit(1)
    
    if args.show_config:
        config = loader.load_config()
        print(f"Environment: {config.environment}")
        print(f"Total Token Budget: {config.total_token_budget}")
        print(f"Stability Target: {config.get('stability.target_percentage')}%")
        print(f"Evaluation Ready: {config.is_evaluation_ready()}")
        print(f"Artifact Directory: {config.artifact_directory}")