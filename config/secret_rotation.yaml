# Secret Rotation Configuration for GENESIS Orchestrator
# =====================================================

# Backend configuration
backends:
  vault:
    enabled: true
    url: ${VAULT_URL:-http://127.0.0.1:8200}
    token: ${VAULT_TOKEN}
    namespace: ${VAULT_NAMESPACE:-genesis}
    auth_method: ${VAULT_AUTH_METHOD:-token}
    timeout_seconds: 30
    verify_ssl: ${VAULT_VERIFY_SSL:-true}
    
    # AppRole configuration (if using approle auth)
    role_id: ${VAULT_ROLE_ID}
    secret_id: ${VAULT_SECRET_ID}
    
    # JWT configuration (if using jwt auth)
    jwt: ${VAULT_JWT}
    role: ${VAULT_ROLE:-genesis-rotation}
  
  aws_secrets:
    enabled: ${AWS_SECRETS_ENABLED:-false}
    region: ${AWS_DEFAULT_REGION:-us-east-1}
    prefix: ${AWS_SECRETS_PREFIX:-genesis/}
  
  filesystem:
    enabled: ${FILESYSTEM_SECRETS_ENABLED:-false}
    path: ${FILESYSTEM_SECRETS_PATH:-./storage/secrets}
    encryption_key: ${FILESYSTEM_SECRETS_KEY}

# General rotation settings
rotation:
  max_concurrent: ${ROTATION_MAX_CONCURRENT:-5}
  timeout_seconds: ${ROTATION_TIMEOUT:-300}
  rollback_on_failure: ${ROTATION_ROLLBACK:-true}
  validate_after_rotation: ${ROTATION_VALIDATE:-true}
  notification_webhook: ${ROTATION_WEBHOOK_URL}
  require_vault: ${ROTATION_REQUIRE_VAULT:-true}
  
  # Emergency rotation settings
  emergency:
    skip_validation: true
    immediate_deployment: true
    bypass_approval: true
    alert_threshold: critical

# Rotation policies for different secret types
policies:
  # API Keys (Claude, OpenAI, etc.)
  api_keys:
    type: api_key
    rotation_interval_days: ${API_KEY_ROTATION_DAYS:-30}
    warning_days: ${API_KEY_WARNING_DAYS:-7}
    length: 64
    prefix: "gns"
    validation_required: true
    validation_endpoint: "/api/v1/validate-api-key"
    notification_channels: ["webhook", "log"]
    
    # Service-specific validation
    claude:
      validation_url: "https://api.anthropic.com/v1/messages"
      validation_method: "POST"
      validation_headers:
        Content-Type: "application/json"
      validation_payload:
        model: "claude-3-haiku-20240307"
        max_tokens: 1
        messages:
          - role: "user"
            content: "test"
    
    openai:
      validation_url: "https://api.openai.com/v1/models"
      validation_method: "GET"
      validation_headers:
        Content-Type: "application/json"

  # Webhook HMAC secrets
  webhook_secrets:
    type: webhook_secret
    rotation_interval_days: ${WEBHOOK_SECRET_ROTATION_DAYS:-90}
    warning_days: ${WEBHOOK_SECRET_WARNING_DAYS:-14}
    length: 64
    validation_required: true
    validation_method: hmac_test
    notification_channels: ["webhook", "log", "email"]
    
    # Staged rollout for webhook secrets
    staged_rollout:
      enabled: true
      stages:
        - name: "validation"
          duration_minutes: 5
          validation_required: true
        - name: "canary"
          duration_minutes: 15
          traffic_percentage: 10
        - name: "production"
          duration_minutes: 0
          traffic_percentage: 100

  # Database passwords
  database_passwords:
    type: database_password
    rotation_interval_days: ${DB_PASSWORD_ROTATION_DAYS:-1}
    warning_days: 0
    length: 32
    include_symbols: true
    validation_required: false
    zero_downtime: true
    
    # Connection validation
    validation:
      test_query: "SELECT 1"
      timeout_seconds: 10
      retry_attempts: 3

  # Encryption keys
  encryption_keys:
    type: encryption_key
    rotation_interval_days: ${ENCRYPTION_KEY_ROTATION_DAYS:-90}
    warning_days: ${ENCRYPTION_KEY_WARNING_DAYS:-14}
    validation_required: true
    backup_old_keys: true
    key_derivation: true
    notification_channels: ["webhook", "log", "email", "slack"]
    
    # Key escrow for recovery
    escrow:
      enabled: true
      threshold_shares: 3
      total_shares: 5

  # JWT signing secrets
  jwt_secrets:
    type: jwt_secret
    rotation_interval_days: ${JWT_SECRET_ROTATION_DAYS:-7}
    warning_days: ${JWT_SECRET_WARNING_DAYS:-1}
    length: 256
    validation_required: true
    invalidate_old_tokens: false # Keep old secret for grace period
    grace_period_days: 1
    notification_channels: ["webhook", "log"]

  # OAuth client secrets
  oauth_secrets:
    type: oauth_secret
    rotation_interval_days: ${OAUTH_SECRET_ROTATION_DAYS:-180}
    warning_days: ${OAUTH_SECRET_WARNING_DAYS:-30}
    length: 48
    validation_required: true
    provider_notification_required: true
    notification_channels: ["webhook", "log", "email"]

# Notification configuration
notifications:
  webhook:
    enabled: ${ROTATION_WEBHOOK_ENABLED:-true}
    url: ${ROTATION_WEBHOOK_URL}
    timeout_seconds: 10
    retry_attempts: 3
    headers:
      Content-Type: "application/json"
      X-Source: "genesis-rotation-service"
    
    # Webhook payload template
    payload_template:
      event: "secret_rotated"
      timestamp: "{{ timestamp }}"
      secret_path: "{{ secret_path }}"
      rotation_id: "{{ rotation_id }}"
      policy: "{{ policy }}"
      emergency: "{{ emergency }}"
      success: "{{ success }}"
  
  email:
    enabled: ${ROTATION_EMAIL_ENABLED:-false}
    smtp_host: ${ROTATION_SMTP_HOST}
    smtp_port: ${ROTATION_SMTP_PORT:-587}
    smtp_user: ${ROTATION_SMTP_USER}
    smtp_password: ${ROTATION_SMTP_PASSWORD}
    from_address: ${ROTATION_FROM_EMAIL}
    to_addresses: ${ROTATION_TO_EMAILS}
    
    # Email templates
    templates:
      success: "templates/rotation_success.html"
      failure: "templates/rotation_failure.html"
      warning: "templates/rotation_warning.html"
  
  slack:
    enabled: ${ROTATION_SLACK_ENABLED:-false}
    webhook_url: ${ROTATION_SLACK_WEBHOOK}
    channel: ${ROTATION_SLACK_CHANNEL:-#security}
    username: "Genesis Rotation Bot"
    icon_emoji: ":key:"

# Security and compliance
security:
  audit_logging:
    enabled: true
    log_file: "logs/secret_rotation_audit.log"
    log_level: "INFO"
    include_metadata: true
    retention_days: 90
    
  access_control:
    require_mfa: ${ROTATION_REQUIRE_MFA:-false}
    allowed_ips: ${ROTATION_ALLOWED_IPS}
    require_approval: ${ROTATION_REQUIRE_APPROVAL:-false}
    approval_timeout_minutes: 60
    
  encryption:
    encrypt_logs: ${ROTATION_ENCRYPT_LOGS:-true}
    encrypt_notifications: ${ROTATION_ENCRYPT_NOTIFICATIONS:-false}
    key_derivation_rounds: 100000

# Monitoring and health checks
monitoring:
  health_checks:
    enabled: true
    interval_seconds: 60
    endpoints:
      - name: "vault_connection"
        type: "http"
        url: "${VAULT_URL}/v1/sys/health"
        timeout_seconds: 5
      - name: "secret_accessibility"
        type: "vault_secret"
        path: "genesis/monitoring/health_check"
        timeout_seconds: 10
  
  metrics:
    enabled: true
    export_interval_seconds: 30
    retention_days: 7
    
    # Prometheus metrics
    prometheus:
      enabled: ${METRICS_PROMETHEUS_ENABLED:-false}
      port: ${METRICS_PROMETHEUS_PORT:-9090}
      path: "/metrics"
  
  alerting:
    enabled: true
    channels: ["webhook", "email"]
    
    # Alert conditions
    conditions:
      - name: "rotation_failure_rate"
        metric: "rotation_failures"
        threshold: 0.1
        period_minutes: 60
        severity: "critical"
      
      - name: "vault_connectivity"
        metric: "vault_health_check"
        threshold: 1
        period_minutes: 5
        severity: "critical"
      
      - name: "secret_expiry_warning"
        metric: "secrets_expiring_soon"
        threshold: 1
        period_hours: 24
        severity: "warning"

# Development and testing
development:
  enabled: ${APP_ENV:-production} != "production"
  mock_rotation: ${ROTATION_MOCK:-false}
  test_secrets:
    - path: "genesis/test/api_key"
      policy: "api_keys"
    - path: "genesis/test/webhook_secret"
      policy: "webhook_secrets"
  
  override_intervals:
    enabled: ${ROTATION_OVERRIDE_INTERVALS:-false}
    test_interval_minutes: 5 # For testing, rotate every 5 minutes
  
  dry_run_default: ${ROTATION_DRY_RUN_DEFAULT:-true}
  validation_bypass: ${ROTATION_VALIDATION_BYPASS:-false}

# Disaster recovery
disaster_recovery:
  backup:
    enabled: true
    frequency: "daily"
    retention_days: 30
    encryption: true
    storage_location: ${BACKUP_STORAGE_LOCATION:-./backups}
  
  emergency_procedures:
    emergency_contact: ${EMERGENCY_CONTACT}
    escalation_timeout_minutes: 30
    auto_rollback_enabled: true
    manual_override_required: false
  
  recovery:
    automated_recovery: true
    recovery_timeout_minutes: 60
    verification_required: true

# Performance optimization
performance:
  caching:
    enabled: true
    ttl_seconds: 300
    backend: "redis"
  
  connection_pooling:
    enabled: true
    max_connections: 10
    idle_timeout_seconds: 300
  
  batch_operations:
    enabled: true
    batch_size: 10
    parallel_batches: 2
  
  retry_logic:
    max_attempts: 3
    backoff_strategy: "exponential"
    base_delay_seconds: 1
    max_delay_seconds: 60